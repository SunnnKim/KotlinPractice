11. 코틀린에서 접근제어를 다루는 방법

목차
자바와 코틀린의 가시성 차이
코틀린 파일의 접근제어
다양한 구성요소의 접근제어

# 자바와 코틀린의 가시성 차이
## JAVA
public 모든 곳 접근가능
protected 같은 패키지 또는 하위클래스에서 접근가능
default 같은 패키지
private 선언된 클래스 내에서만 접근가능

## KOTLIN
public 모든 곳 접근가능
protected 선언된 클래스 또는 하위클래스에서 접근가능
 -> 이유 : 코틀린에서는 기본적으로 '패키지' 라는 개념을 namespace를 관리하기 위한 용도로만 사용, 가시성제어에는 사용하지 않는다
default-> internal 같은 모듈에서만 접근가능
모듈? 한번에 컴파일 되는 코틀린 코드. IDEA Module, Maven project, Gradle source set, Ant task <kotlinc> 의 호출로 된 컴파일 파일의 집합
private 선언된 클래스 법내에서만 접근가능

-> 코틀린에서 패키지라는 개념을 사용하지 않음
-> 모듈을 접근제어하는 개념이 생김
-> 기본 접근지시어 public

# 코틀린 파일의 접근제어
코틀린은 기본적으로 파일에 함수, 변수, 클래스를 모두 만들 수 있음
-> 만약 파일에 접근지시어를 붙인다면?

private val a  = 10;

### 파일 접근지시어
public 모든 곳 접근가능
protected 파일(최상단)에는 사용불가능 ***
internal 같은 모듈에서만 접근가능
private 같은 파일내에서만 접근가능


//protected var a = 10 -> 파일 최상단에서는 protected 사용불가


# 다양한 구성요소의 접근제어

## 클래스 안의 멤버

public 모든 곳 접근가능
protected 선언된 클래스 또는 하위클래스 내에서 접근가능
internal 같은 모듈에서만 접근가능
private 같은 파일내에서만 접근가능

## 생성자
-> 가시성 범위는 동일하지만 생성자에 접근지시어를 붙이려면 constructor 키워드를 붙여주어야 한다

open class Cat protected constructor( // 생성자에 붙이려면 constructor 붙여야한
    val name: String
){
    // ...
}

Java의 유틸성 코드를 만들 때 추상클래스의 생성자를 private으로 정의하여 인스턴스화를 막는데
코틀린에서eh 추상클래스를 사용해 비슷하게 만들 수 있으나..
그냥 파일최상단에 유틸함수를 만들어 쓰면 편리하다


// 파일최상단 유틸함수
fun isDirectoryPath(path: String): Boolean {
    return path.endsWith("/")
}


## 프로퍼티의 가시성 범위
-> 가시성 범위는 동일하지만, 가시성을 제어하는 방법은 2가지

1. getter / setter 동시에 접근지시어를 정하기

class Cat (
    private val name: String,
    internal val leg: Int // getter / setter 한번에 가시성범위 제어 (internal)
){

}

2. 접근제어자를 구분하여 정하기
->custom getter/setter 를 만들고 원하는 곳에 접근제어자 지정해준다

class Cat (
    val _color: String // getter는 public
){
    var color = _color
        private set // setter는 private
}



# 자바를 함께 사용할 때 주의점
1. internal 은 바이트 코드상의 public이 되기 때문에
-> Java 코드 에서는 Kotlin 모듈의 internal 코드를 가져올 수 있다.
: 코틀린으로 된 하위클래스에서 사용한 Internal이 바이트코드로 변환됨에 따라
상위 자바클래스에서 public 이 되기 때문에 사용가능해진다

2. protected : 자바와 코틀린에서의 의미가 서로 다르다
-> Java는 같은 패키지의 코틀린 protected에 접근할 수 있게 된다.



# 정리
1. 자바/코틀린에서의 접근제어자의 범위가 다르다
2. 코틀린에서 패키지는 namespace 관리용으로 사용되기 때문에 자바와 코틀린에서 protected의 의미가 다르다
3. 코틀린에서 default는 사라지고 internal이 추가됨
4. 생성자에 접근제어자를 붙이려면 constructor 키워드를 명시적으로 붙여야한다.
5. 유틸함수를 만들 때는 클래스보다 파일최상단에 정의하면 편리하다
6. 프로퍼티의 customer setter에 접근제어자를 따로 붙일 수 있다.
7. 자바에서 코틀린코드에 접근할 때 internal 과 protected를 주의한다.