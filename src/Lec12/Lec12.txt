12강 코틀린에서 Object 키워드를 다루는 방법
코틀린에서 object 키워드가 사용되는 3가지 경우가 있다.

1. Static
- 코틀린은 static 라는 개념이 없다. static 대신 'companion object' 라는 개념을 사용한다.
- 클래스에 companion object 블록을 작성하고 그 안에 정적변수, 정적메소드를 작성하면 static과 동일한 역할을 수행한다.
* static : 클래스가 인스턴스화 될 때 새로운 값이 복제되는 것이 아니라 정적으로 인스턴스끼리의 값을 공유
* companion object : 클래스와 동행하는 유일한 오브젝트

*** MIN_AGE에 waring이 붙는이유?
-> const 라는 키워드를 붙일 수 있는데 값이 할당되는 시점이 다르다.
(const) MIN_AGE => 런타임 시 변수 값이 할당
const MIN_AGE   => 컴파일 시 변수 값이 할당, 진짜 상수에 붙이기 위한 용도. 기본타입, String 에만 붙일 수 있음

*** 자바와 다른점 ?
-> companion object는 하나의 객체로 간주되어 이름을 붙이거나, 인터페이스를 만들 수 있다.

*** 자바에서 코틀린의 static 함수/변수를 사용하고 싶은 경우는?

Person.companion.newBaby("name"); // 동행객체명을 명시하지 않은 경우
// 또는
Person.Factory.newBaby("name");
// 또는
// 코틀린 companion object 함수/변수에 @JvmStatic 어노테이션을 붙이면 자바에서처럼 스태틱함수에 바로 접근할 수 있다.
Person.newBaby("name");
@JvmStatic
fun newBabay(name: String): Person {
    return Person(name, MIN_AGE)
}

*** etc
- companion object (동행객체)에 유틸성 함수를 구현할 수 있지만, 최상단 파일을 활용하는 것을 추천


2. 싱글톤
object 키워드를 붙인다.

// 싱글톤
object Singleton {
    var a: Int = 0
}

-> 애초에 싱글톤의 개념이 인스턴스 1개만 생성하기 때문에
 인스턴스화를 하는 것이 아니고 코드에서 바로 호출하여 접근


3. 익명클래스
특정 인터페이스나 클래스를 상속받은 구현체를 일회성으로 사용할 때 쓰는 클래스
object를 사용한다.
인터페이스 구현시 해당 인터페이스를 상속받은 object를 생성한다는 의미



# 정리
1. companion object
- Java의 static 개념, 정적함수, 변수를 만들 수 있다.
- 하나의 객체로 간주되기 때문에 이름을 붙이거나 타입을 상속받을 수 있다.

2. Singleton : object 키워드를 사용해 생성한다.

3. 익명클래스 object : (TYPE명)